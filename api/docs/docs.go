// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/users": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nGet a list of users and their information based on optional query filters.\nSoft-deleted users are not included in the response.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get user profile table",
                "parameters": [
                    {
                        "enum": [
                            "admin",
                            "user",
                            "approver"
                        ],
                        "type": "string",
                        "description": "Filter by role",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin table",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-array_model_User"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Non-admin user",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No users found",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nCreate a new user for the API. Ths user will receive an email with a token to set their password.\nYou can create users with the following roles: ` + "`" + `admin` + "`" + `, ` + "`" + `user` + "`" + `, ` + "`" + `approver` + "`" + `.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User created",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Non-admin user",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/admin/users/{email}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nGet the profile of a user based on the email address.\nSoft-deleted users can not be retrieved.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get profile of a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-model_User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Non-admin user",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No users found",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nDelete a user based on the email address.\nOnly soft-deletes the user, does not remove the user from the database.\nAdmins cannot delete their own account.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email to delete",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User soft-deleted",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Non-admin user or cannot delete own account",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "__Admin role required__\nChange the role or status of a user based on the email address.\nAdmins cannot change their own role or status.\nPossible roles: ` + "`" + `admin` + "`" + `, ` + "`" + `user` + "`" + `, ` + "`" + `approver` + "`" + `.\nPossible statuses: ` + "`" + `active` + "`" + `, ` + "`" + `inactive` + "`" + `.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Change user role or status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User email to update",
                        "name": "email",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeUserProfileQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile updated",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "No changes requested",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Non-admin user or cannot update own account",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/adr": {
            "get": {
                "description": "Get ADRs for one or more PZNs. Each PZN can have multiple ADRs.\nThe ` + "`" + `lang` + "`" + ` parameter can be used to specify the language of the ADR descriptions.\nValid values are ` + "`" + `english` + "`" + `, ` + "`" + `german` + "`" + `, and ` + "`" + `german-simple` + "`" + `.\nThe default language is ` + "`" + `english` + "`" + `.\n` + "`" + `german-simple` + "`" + ` returns the simplified German ADR description.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Adverse Drug Reactions"
                ],
                "summary": "List ADRs for PZNs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of PZNs",
                        "name": "pzns",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "english",
                            "german",
                            "german-simple"
                        ],
                        "type": "string",
                        "description": "Language for ADR names (default: english)",
                        "name": "lang",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of PZNs with ADRs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/adrcontroller.PznADR"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request (e.g. invalid PZNs)"
                    },
                    "404": {
                        "description": "PZN(s) not found"
                    }
                }
            }
        },
        "/formulations": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Drug formulation codes and their descriptions that are used in the database.\nThese codes are used, e.g., in the compound interaction endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Formulation"
                ],
                "summary": "List all drug formulation codes and their descriptions",
                "responses": {
                    "200": {
                        "description": "Response with formulations",
                        "schema": {
                            "$ref": "#/definitions/FormResponse"
                        }
                    }
                }
            }
        },
        "/sys/info": {
            "get": {
                "description": "Get information about the API including version and query limits.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get API Info",
                "responses": {
                    "200": {
                        "description": "Response with API info",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-InfoResp"
                        }
                    }
                }
            }
        },
        "/sys/ping": {
            "get": {
                "description": "Ping the API to check if it is alive.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Ping the API",
                "responses": {
                    "200": {
                        "description": "Response with pong message",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-PingResp"
                        }
                    }
                }
            }
        },
        "/user": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "The account will be soft deleted.\nIf the user is the last admin, the account cannot be deleted.\nIf a user is soft-deleted, the account will be permanently deleted in the future.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete user account",
                "responses": {
                    "200": {
                        "description": "Password reset",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Last admin account",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/email": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Requests an email change for the user. An email change token will be sent to the new email address.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Request email change for the user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangeEmailQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email change request token sent",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Bad request/invalid email/already in use",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/email/confirm": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Confirms an email change for the user.\nThe new email address will be active on the next login.\nYou have to login (authenticate) with the old email address to confirm the change.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Confirm email change for the user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ConfirmEmailChangeQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email changed",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Token expired",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "No email change request found",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Acciqures a JWT token for the user to access the API\nOnly active users can login\nUsers can downgrade their role by providing the role in the request (optional)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Login for the API to get JWT token",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LoginQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User is not active",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/password": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Changes the password for the user. The old password must be provided.\nThe new password will be active on the next login.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Change password for the user",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ChangePwdQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password changed",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Wrong old password/invalid new password",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/password/reset": {
            "post": {
                "description": "Requests a password reset for the user. A password reset token will be sent to the user's email.\nPassword reset tokens are valid for a limited time.\nThe API will always return the same message (200) to prevent email enumeration.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResetPwdQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset token sent",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/password/reset/confirm": {
            "post": {
                "description": "Confirms a password reset or first password set for the user.\nThe API will always return the same message (400) on auth errors to prevent email enumeration.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Confirm password reset or first password set",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResetConfirmPwdQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Bad request/invalid token",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Token expired",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/password/reset/init": {
            "post": {
                "description": "Confirms a password reset or first password set for the user.\nThe API will always return the same message (400) on auth errors to prevent email enumeration.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Confirm password reset or first password set",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResetConfirmPwdQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "Bad request/invalid token",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Token expired",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/profile": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get the user profile information",
                "responses": {
                    "200": {
                        "description": "User profile",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-UserProfile"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the user profile information. At least one field must be provided for update.\nThe following fields can be updated: ` + "`" + `first name` + "`" + `, ` + "`" + `last name` + "`" + `, ` + "`" + `organization` + "`" + `.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update user profile information",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateProfileQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile updated",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-map_string_string"
                        }
                    },
                    "400": {
                        "description": "No changes requested or invalid data",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        },
        "/user/refresh-token": {
            "post": {
                "description": "Refreshes the JWT token for the user to access the API",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Refresh JWT token",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RefreshQuery"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token",
                        "schema": {
                            "$ref": "#/definitions/JSendSuccess-LoginResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not active/role invalid/user deleted",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Bad query format",
                        "schema": {
                            "$ref": "#/definitions/JSendFailure-ValidationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/JSendError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ChangeEmailQuery": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "New email address",
                    "type": "string",
                    "example": "newmail@newcomp.com"
                }
            }
        },
        "ChangePwdQuery": {
            "type": "object",
            "required": [
                "new_password",
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "description": "New password",
                    "type": "string",
                    "example": "new_password"
                },
                "old_password": {
                    "description": "Old password",
                    "type": "string",
                    "example": "old_password"
                }
            }
        },
        "ChangeUserProfileQuery": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "approver"
                    ],
                    "example": "user"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "active",
                        "inactive"
                    ],
                    "example": "inactive"
                }
            }
        },
        "ConfirmEmailChangeQuery": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "description": "Change token",
                    "type": "string",
                    "example": "my_change_token"
                }
            }
        },
        "CreateUserQuery": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "organization",
                "role"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "joe@gmail.com"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Joe"
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Doe"
                },
                "organization": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "ACME"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "approver"
                    ]
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Some error message"
                }
            }
        },
        "FormResponse": {
            "type": "object",
            "properties": {
                "formulations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Formulation"
                    }
                }
            }
        },
        "Formulation": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Formulation description",
                    "type": "string",
                    "example": "Tablet"
                },
                "formulation": {
                    "description": "Formulation code",
                    "type": "string",
                    "example": "TAB"
                }
            }
        },
        "InfoResp": {
            "type": "object",
            "properties": {
                "api_limits": {
                    "description": "Limits",
                    "allOf": [
                        {
                            "$ref": "#/definitions/cfg.LimitsConfig"
                        }
                    ]
                },
                "meta_info": {
                    "description": "Meta",
                    "allOf": [
                        {
                            "$ref": "#/definitions/cfg.MetaConfig"
                        }
                    ]
                }
            }
        },
        "JSendError": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Internal server error"
                },
                "status": {
                    "description": "Status",
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "JSendFailure-ErrorResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with error message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'fail'",
                    "type": "string",
                    "example": "fail"
                }
            }
        },
        "JSendFailure-ValidationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with error message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ValidationResponse"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'fail'",
                    "type": "string",
                    "example": "fail"
                }
            }
        },
        "JSendSuccess-InfoResp": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/InfoResp"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-LoginResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/LoginResponse"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-PingResp": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/PingResp"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-UserProfile": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/UserProfile"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-array_model_User": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-map_string_string": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/map_string_string"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "JSendSuccess-model_User": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data with success message(s)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                },
                "status": {
                    "description": "Status 'success'",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "LoginQuery": {
            "type": "object",
            "required": [
                "login",
                "password"
            ],
            "properties": {
                "login": {
                    "type": "string",
                    "example": "joe@me.com"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "admin",
                        "user",
                        "approver"
                    ],
                    "example": "user"
                }
            }
        },
        "LoginResponse": {
            "type": "object",
            "properties": {
                "access_expires_in": {
                    "description": "Access token expiration time",
                    "type": "string",
                    "example": "2021-07-01T12:00:00Z"
                },
                "access_token": {
                    "description": "Access token",
                    "type": "string",
                    "example": "your_access_token"
                },
                "last_login": {
                    "description": "Last login time",
                    "type": "string",
                    "example": "2021-07-01T12:00:00Z"
                },
                "refresh_expires_in": {
                    "description": "Refresh token expiration time",
                    "type": "string",
                    "example": "2021-07-01T12:00:00Z"
                },
                "refresh_token": {
                    "description": "Refresh token",
                    "type": "string",
                    "example": "your_refresh_token"
                },
                "role": {
                    "description": "User role",
                    "type": "string",
                    "example": "user"
                },
                "token_type": {
                    "description": "Token type",
                    "type": "string",
                    "example": "Bearer"
                }
            }
        },
        "PingResp": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Message",
                    "type": "string",
                    "example": "pong"
                }
            }
        },
        "RefreshQuery": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string",
                    "example": "my_refresh_token"
                }
            }
        },
        "ResetConfirmPwdQuery": {
            "type": "object",
            "required": [
                "email",
                "password",
                "token"
            ],
            "properties": {
                "email": {
                    "description": "Email address",
                    "type": "string",
                    "example": "joe@me.com"
                },
                "password": {
                    "description": "New password",
                    "type": "string",
                    "example": "my_new_pwd"
                },
                "token": {
                    "description": "Reset token",
                    "type": "string",
                    "example": "my_reset_token"
                }
            }
        },
        "ResetPwdQuery": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email address",
                    "type": "string",
                    "example": "joe@me.com"
                }
            }
        },
        "UpdateProfileQuery": {
            "type": "object",
            "properties": {
                "first_name": {
                    "description": "First name",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Joe"
                },
                "last_name": {
                    "description": "Last name",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "Doe"
                },
                "organization": {
                    "description": "Organization",
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 2,
                    "example": "ACME"
                }
            }
        },
        "UserProfile": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address",
                    "type": "string",
                    "example": "joe@me.com"
                },
                "first_name": {
                    "description": "First name",
                    "type": "string",
                    "example": "Joe"
                },
                "last_login": {
                    "description": "Last login time",
                    "type": "string",
                    "example": "2021-07-01T12:00:00Z"
                },
                "last_name": {
                    "description": "Last name",
                    "type": "string",
                    "example": "Doe"
                },
                "organization": {
                    "description": "Organization",
                    "type": "string",
                    "example": "ACME"
                },
                "role": {
                    "description": "User role",
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "ValidationError": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "Field Query or JSON field",
                    "type": "string",
                    "example": "query_field"
                },
                "reason": {
                    "description": "Validation error reason",
                    "type": "string",
                    "example": "reason"
                }
            }
        },
        "ValidationResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "description": "Validation errors",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ValidationError"
                    }
                }
            }
        },
        "adrcontroller.ADR": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "frequency": {
                    "type": "string"
                },
                "frequency_code": {
                    "type": "integer"
                }
            }
        },
        "adrcontroller.PznADR": {
            "type": "object",
            "properties": {
                "adrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/adrcontroller.ADR"
                    }
                },
                "pzn": {
                    "type": "string"
                }
            }
        },
        "cfg.LimitsConfig": {
            "description": "Configuration limits for the API",
            "type": "object",
            "properties": {
                "max_batch_queries": {
                    "description": "Max number of baches for POST requests",
                    "type": "integer",
                    "example": 50
                },
                "max_drugs": {
                    "description": "Max number of drugs for interaction check",
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "cfg.MetaConfig": {
            "description": "Meta Information for the API",
            "type": "object",
            "properties": {
                "api": {
                    "type": "string",
                    "example": "API Name"
                },
                "description": {
                    "type": "string",
                    "example": "API Description"
                },
                "url": {
                    "type": "string",
                    "example": "https://api.example.com"
                },
                "version": {
                    "type": "string",
                    "example": "1.0.0"
                },
                "version_tag": {
                    "type": "string",
                    "example": "sometag"
                }
            }
        },
        "map_string_string": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "joe@me.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "Joe"
                },
                "last_login": {
                    "type": "string",
                    "example": "2021-01-01T00:00:00Z"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "organization": {
                    "type": "string",
                    "example": "ACME"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "status": {
                    "type": "string",
                    "example": "active"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
